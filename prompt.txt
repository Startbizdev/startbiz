OBJECTIF GLOBAL
Tu es chargé de développer la plateforme Startbiz (site + back-office) avec :
- Front : Next.js 14+ (App Router, RSC), Tailwind CSS, Lucide icons
- Back : Next API routes (route handlers), MongoDB Atlas (Mongoose ou officiel driver)
- Stockage : MongoDB Atlas (collections: services, cities, pages, leads, newsletters, hostingAssets, settings, users)
- Emails : SMTP Ionos (transactionnels: leads, rappels hébergement)
- Média : Cloudinary (assets images pour études de cas, logos clients, visuels pages)
- SEO : SSG/ISR, sitemaps, OpenGraph, JSON-LD (Service, Organization, FAQPage), canonicals, noindex toggle
- Sécurité : validation Zod, rate-limit, hCaptcha/Cloudflare Turnstile, consent logs RGPD
- Marketing/produit : arbo Services × Villes (sans duplicate), lead engine + scoring, newsletters (via SMTP ou intégration Brevo/Mailchimp option), rappels hébergement, back-office minimal efficace
- Design : sobre/premium (références: Linear/Vercel/Apple), CTA discrets, crédibilité, chiffres concrets

================================================================
1) ENV & CONFIG
================================================================

Créer .env.local.example (et lire via process.env) :
- MONGODB_URI=
- SMTP_HOST=smtp.ionos.fr
- SMTP_PORT=465
- SMTP_USER=
- SMTP_PASS=
- SMTP_FROM="Startbiz <contact@startbiz.fr>"
- CLOUDINARY_CLOUD_NAME=
- CLOUDINARY_API_KEY=
- CLOUDINARY_API_SECRET=
- TURNSTILE_SITE_KEY=
- TURNSTILE_SECRET_KEY=
- NEXT_PUBLIC_SITE_URL=https://www.startbiz.fr
- BACKOFFICE_PROTECTED_EMAIL= (accès admin)
- WEBHOOK_SLACK_URL= (optionnel)
- BREVO_API_KEY= (ou MAILCHIMP_API_KEY) (optionnel newsletters)

Ajouter config Tailwind + PostCSS standard. Configurer fonts Inter/Source Sans.

================================================================
2) DESIGN SYSTEM (Tailwind)
================================================================
- Container : max-w-[1200px] mx-auto px-6
- Spacing scale : 4/8/12/16/24/32/48/64
- Radius : rounded-xl (cards)
- Palette (light par défaut) :
  - fond : #FFFFFF ; texte : #0B0D10 ; gris UI : #111827 / #1F2937 / #6B7280 / #F3F4F6
  - accent principal : #3B82F6 (bleu) (ne pas multiplier les couleurs)
- Composants réutilisables :
  - Section, PageHeader, Card, Badge, LeadForm, KpiStrip, UseCasesGrid, Steps, FAQAccordion, LogoWall, CaseCard, StickyAside, DataTable, KanbanBoard
- Motion : transitions 150–250ms, ease cubic-bezier(0.2,0.8,0.2,1)

Livrer quelques composants prêts :
- <LeadForm /> (sticky sur desktop dans pages service)
- <ServiceCard />, <CityCard />
- <Accordion /> pour FAQ
- <KanbanBoard /> pour leads
- <DataTable /> générique avec colonnes configurables

================================================================
3) MODÈLES MONGO & INDEX
================================================================
Collections & schémas (TypeScript/Mongoose) :

users
- email (unique), hash, role ("admin")
- createdAt
Index: email unique

services (services nationaux/piliers)
- _id/slug (ex: "developpement-application-mobile")
- title, metaTitle, metaDescription, ogImage
- sections (rich text), faq [{q,a}], schemaJsonLd (string)
- pillar: true
- createdAt, updatedAt
Index: slug

cities
- _id/slug (ex: "paris")
- name, region, sectorHints [string]
- createdAt, updatedAt
Index: slug

pages (combinaisons service × ville)
- serviceSlug, citySlug, url (e.g. "/paris/developpement-application-mobile")
- title, metaDescription, h1
- intro, useCases [{title,body}], methodology [string]
- faq [{q,a}]
- canonical (string), noindex (bool)
- schemaType ("Service")
- createdAt, updatedAt
Index: { citySlug:1, serviceSlug:1, url:1 }, unique url

leads
- createdAt, status ("new|qualified|contacted|meeting|proposal|won|lost|cold")
- score (number), firstName, lastName, email, phone?, company?, role?
- serviceSlug, citySlug, budgetRange ("5-10k"|"10-25k"|"25-50k"|"50-100k"|"100k+")
- timeline ("urgent"|"1-3m"|">3m"|"tbd")
- projectSummary, pageUrl
- utm {source,medium,campaign}
- tags [string], notes [{by,body,at}], nextActionAt?, owner?
Indexes: 
  - { email:1, serviceSlug:1, createdAt:-1 }
  - { status:1, score:-1, createdAt:-1 }
  - { citySlug:1, serviceSlug:1 }

newsletters
- name, segmentQuery (JSON), subject, html, sentAt?, stats?
- createdAt, updatedAt

hostingAssets
- clientName, domain, provider, plan, expiresAt (Date), status ("active"|"renewal"|"expired"), notes?
- lastNotifiedAt?, notifyHistory [{at,type}] // type: J-60/J-30/J-7
Indexes:
  - { expiresAt:1, status:1 }

settings
- key, value (JSON)

================================================================
4) ARBO PUBLIC & SEO
================================================================
App Router structure:
- app/
  - (public)/
    - layout.tsx (Header/Footer/OG defaults)
    - page.tsx (Home premium sobre)
    - [service]/page.tsx                  // page pilier service (SSG/ISR)
    - [city]/[service]/page.tsx           // service × ville (SSG/ISR)
    - [city]/page.tsx                     // hub ville (liste services)
    - cas-clients/page.tsx
    - blog/page.tsx (placeholder)
    - contact/page.tsx
    - rdv/page.tsx (calendly/cal.com)
  - api/
    - leads/route.ts (POST)
    - newsletters/send/route.ts (POST)
    - hosting/notify/route.ts (POST)
    - revalidate/route.ts (POST, protégé admin)
    - upload/route.ts (POST Cloudinary via signed uploads)
- lib/ (db, models, mailer, cloudinary, validation, scoring)
- components/ (UI)
- styles/

SEO & SSG/ISR :
- generateStaticParams() sur [service] et [city]/[service] depuis Mongo
- export const revalidate = 86400 (24h)
- Page service : JSON-LD `Service` + `Organization`
- Page service×ville : `Service` + areaServed City + FAQPage si faq
- Canonical par page (url absolue)
- Sitemaps:
  - /sitemap.xml (index)
  - /sitemap-services.xml
  - /sitemap-villes.xml
  - /sitemap-pages.xml
- OpenGraph images par défaut + spécifiques si ogImage

Services piliers initiaux à créer en BDD :
- agence-digitale
- agence-web
- creation-site-internet
- developpement-application-mobile
- developpement-plateforme-saas
- developpement-marketplace
- agence-ecommerce-premium
- developpement-logiciel-sur-mesure
- integration-api-erp-crm
- application-mvp-startup
- refonte-site-internet
- hebergement-hds-sante
- strategie-digitale-conseil
- seo-sea-growth

Villes cibles initiales (12) :
- paris, lyon, marseille, toulouse, bordeaux, lille, nantes, nice, strasbourg, montpellier, rennes, grenoble

Créer un script de seed qui :
1) Insère services (metaTitle/metaDesc de base, sections placeholders)
2) Insère cities (sectorHints, e.g. Paris→Fintech/Retail ; Lyon→Industrie/Biotech ; Marseille→Santé/Tourisme ; Bordeaux→Luxe/Vin ; Lille→Retail/Logistique ; Nantes→Tech ; etc.)
3) Génère pages (service×ville) avec contenus uniques minimaux :
   - intro locale (utiliser sectorHints)
   - 3 useCases spécifiques
   - 3 FAQ locales
   - canonical = NEXT_PUBLIC_SITE_URL + url
   - noindex=false
4) Purge/Upsert safe

================================================================
5) LEAD ENGINE & FORMULAIRES
================================================================
LeadForm (réutilisable) :
Champs visibles :
- firstName, lastName, email, phone?
- company?, role (Dirigeant/CTO/Responsable/Autre)
- budgetRange (5-10k, 10-25k, 25-50k, 50-100k, 100k+)
- timeline (urgent, 1-3m, >3m, tbd)
- projectSummary
Champs cachés :
- pageUrl, serviceSlug (inféré depuis route), citySlug (inféré), utm_source/medium/campaign
- turnstile/hcaptcha token

Validation Zod, formatage (trim, lower email), rate-limit par IP.
POST /api/leads :
- dédup légère (email+serviceSlug, fenêtre 45j)
- scoring :
  + budget: 10–25k (+10), 25–50k (+20), 50–100k (+30), 100k+ (+40)
  + timeline: urgent (+15), 1–3m (+10), >3m (+0)
  + role: Dirigeant/CTO (+10)
  + service premium (SaaS/Marketplace/HDS) (+10)
  + email pro (domaine ≠ gmail/outlook/etc.) (+5)
- statut auto :
  score≥45 → qualified
  25–44 → review
  <25 → cold
- envoi email transactionnel (SMTP Ionos) au prospect (accusé réception sobre + lien rdv) et email alerte interne (détails + lien back-office)
- webhook Slack (option)

================================================================
6) BACK-OFFICE (auth simple + modules)
================================================================
Accès admin (email ≡ BACKOFFICE_PROTECTED_EMAIL + mot de passe haché).
Routes backoffice sous /admin (protected layout).

Modules :
A) Leads
- Vue Kanban : colonnes new/qualified/contacted/meeting/proposal/won/lost/cold (drag & drop)
- Vue Table : filtres (service, ville, score, période, source), export CSV
- Fiche lead : notes (timeline), nextActionAt (rappel), tags

B) Contenus SEO (CMS léger)
- Services (CRUD) : title, slug, meta, sections (rich text), faq, schemaJsonLd, pillar=true
- Villes (CRUD) : name, slug, region, sectorHints
- Pages (service×ville) (CRUD) : title, metaDescription, h1, intro, useCases[], methodology[], faq[], canonical, noindex (bool), schemaType
- Bouton “Rebuild ISR” : POST /api/revalidate?path=/paris/developpement-application-mobile

C) Newsletters (simple)
- Listes/Segments dynamiques (requêtes sur leads : par service, ville, score, status)
- Templates HTML (en-tête/pieds sobres)
- Envoi via SMTP Ionos (ou si BREVO_API_KEY fourni, via API Brevo/Mailchimp)
- Journal des envois (horodatage, cible)

D) Hébergements & renouvellements
- Table : clientName, domain, provider, plan, expiresAt, status
- Filtres échéance (J-60/J-30/J-7)
- Actions : envoyer rappel (email client + log notifyHistory)
- Cron route (à déclencher par système externe) : /api/hosting/notify pour envois automatiques

E) Médias (Cloudinary)
- Upload images (cover service, études de cas, logos clients)
- Preview + suppression
- Stocker URLs cloudinary sécurisées dans documents

================================================================
7) EMAILS (SMTP Ionos) & TEMPLATES
================================================================
Emails transactionnels (HTML sobre, dark-mode friendly) :
- “Nouveau lead Startbiz — récap”
- “Merci — parlons de votre projet” (avec lien rdv)
- “Rappel hébergement J-60 / J-30 / J-7” (ton pro, non agressif)
- “Newsletter” (template générique)

Créer un utilitaire mailer.ts (nodemailer) + adapter fallback 587/465 SSL/TLS.

================================================================
8) SÉCURITÉ & RGPD
================================================================
- hCaptcha/Turnstile + honeypot + rate-limit (formulaires)
- Logs consentements (timestamp, ip hash) dans leads
- Pas de données sensibles
- Droit d’effacement (delete lead)
- HTTP headers sécurisés (Next middleware), CSRF non nécessaire pour POST API publique si token + rate-limit

================================================================
9) PAGES & CONTENUS — COPIES/TON
================================================================
Ton premium & sobre (cabinet digital), sans exagération.
Page Home :
- H1 : “Agence digitale sur mesure”
- Sous-texte : “Nous concevons des plateformes web et mobiles qui accélèrent la croissance des entreprises.”
- KPI strip (+600 projets, 15 pays, 20k users HDS, 3M€ marketplace)
- Services phares (SaaS, App mobile, Marketplace, E-commerce, Logiciel sur mesure, HDS)
- Études de cas (contexte → solution → résultat)
- CTA sobre : “Discutons de votre projet”

Page Service (pilier) :
- Hero sobre (H1+intro+CTA)
- Méthodo 5 étapes
- Use cases (3 cartes)
- Tech/compliance chips (Next.js, RN, Node, Mongo, Stripe, HDS)
- FAQ (accordéon, JSON-LD FAQPage)
- LeadForm sticky

Page Service×Ville :
- Intro locale (éco/secteurs)
- Use cases adaptés
- FAQ locale
- CTA “Réserver un appel”

================================================================
10) SEEDING AUTOMATIQUE
================================================================
Écrire un script `scripts/seed.ts` :
- Crée services (liste ci-dessus avec meta/Titles de base)
- Crée cities (12 villes avec sectorHints)
- Génère pages service×ville avec :
  - title/metaDescription/h1 uniques
  - intro locale basée sur sectorHints
  - 3 useCases, 3 FAQ locales, methodology = ["Cadrage","UX/UI","Dev","QA","Déploiement","Run"]
  - canonical = NEXT_PUBLIC_SITE_URL + url
  - noindex=false
- Idempotent (upsert sur slug/url). Lancer via `ts-node`/`tsx`.

================================================================
11) ROUTES SPÉCIFIQUES À CODER
================================================================
API
- POST /api/leads       // créer lead, scoring, emails, webhook
- POST /api/revalidate  // admin only, revalidates path; body: { path: string }
- POST /api/newsletters/send   // admin only, segmentQuery + subject + html
- POST /api/hosting/notify     // admin only; scan échéances et envoie rappels
- POST /api/upload             // admin only; Cloudinary signed upload

PUBLIC PAGES
- /[service]
- /[city]/[service]
- /[city]
- /cas-clients
- /contact (avec formulaire simple → /api/leads)
- /rdv (iframe cal.com / calendly)

ADMIN PAGES (protégées)
- /admin (dashboard : leads récents, hébergements à échéance, stats basiques)
- /admin/leads (kanban + table + fiche)
- /admin/content/services
- /admin/content/cities
- /admin/content/pages
- /admin/newsletters
- /admin/hosting
- /admin/settings

================================================================
12) QUALITÉ, TESTS & ACCEPTANCE
================================================================
- Lighthouse 90+ perf/SEO/accessibility sur pages publiques
- Validate Zod sur tous POST
- 0 erreur console navigateur
- Responsive mobile/tablette/desktop
- Sitemaps & canonicals valides
- ISR: modifier une page en backoffice → revalidate → reflet côté public <24h
- Form lead : crée un document, envoie 2 emails (prospect + interne)
- Rappels hébergement : simulateur de dates → envoie J-60/J-30/J-7
- Upload Cloudinary depuis backoffice OK
- Auth backoffice par email/mot de passe, hashé, session (Iron session/JWT cookies httpOnly)

================================================================
13) LIVRABLES FIN DE MISSION
================================================================
- Repo Next.js complet (monorepo non requis)
- .env.local.example
- scripts/seed.ts
- README avec :
  - setup
  - commandes seed
  - ISR revalidate usage
  - création admin
  - configuration SMTP Ionos & Cloudinary
  - Turnstile/hCaptcha mise en place
- 12 villes × 8+ services pré-générés (96+ pages) en base
- 6 pages piliers rédigées (starter) + Home + Contact + RDV + Villes hub
- Backoffice opérationnel (leads, CMS, newsletters, hosting)

Fin du prompt.
